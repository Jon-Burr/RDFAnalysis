#ifndef RDFAnalysis_NodeBase_ICC
#define RDFAnalysis_NodeBase_ICC

#include <utility>
#include <tuple>
#include <iostream>
#include <boost/algorithm/string/join.hpp>

namespace RDFAnalysis {
  template <typename... TrArgs, typename T, typename... Args>
    std::map<std::string, T> NodeBase::Act(
        std::function<T(RNode&, TrArgs...)> f,
        const ColumnNames_t& columns,
        Args&&... args)
    {
      // Prepare the output
      std::map<std::string, T> result;
      // First work out which systematics affect this action
      std::set<std::string> affecting = m_namer->systematicsAffecting(columns);

      // For each existing RNode apply the action to it
      for (auto& rnodePair : m_rnodes) {
        // Remove this systematic from future consideration
        affecting.erase(rnodePair.first);
        result.insert(std::make_pair(
              rnodePair.first,
              f(rnodePair.second,
                sysVarTranslate(
                  std::forward<Args>(args),
                  *m_namer,
                  rnodePair.first)...) ) );
      }

      // Now iterate over the remaining systematics and add the definition to
      // the nominal
      RNode& nominal = m_rnodes.at(m_namer->nominalName() );
      for (const std::string& syst : affecting)
        result.insert(std::make_pair(
              syst,
              f(nominal,
                sysVarTranslate(
                  std::forward<Args>(args),
                  *m_namer,
                  syst)...) ) );

      return result;
    }

  template <typename T, typename... TrArgs, typename... Args>
    std::map<std::string, T> NodeBase::Act(
        T (RNode::*f)(TrArgs...),
        const ColumnNames_t& columns,
        Args&&... args)
    {

      // Prepare the output
      std::map<std::string, T> result;
      // First work out which systematics affect this action
      std::set<std::string> affecting = m_namer->systematicsAffecting(columns);

      // For each existing RNode apply the action to it
      for (auto& rnodePair : m_rnodes) {
        // Remove this systematic from future consideration
        affecting.erase(rnodePair.first);
        result.insert(std::make_pair(
              rnodePair.first,
              (rnodePair.second.*f)(sysVarTranslate(
                  std::forward<Args>(args),
                  *m_namer,
                  rnodePair.first)... ) ) );
      }

      // Now iterate over the remaining systematics and add the definition to
      // the nominal
      RNode& nominal = m_rnodes.at(m_namer->nominalName() );
      for (const std::string& syst : affecting)
        result.insert(std::make_pair(
              syst,
              (nominal.*f)(sysVarTranslate(
                  std::forward<Args>(args),
                  *m_namer,
                  syst)...) ) );

      return result;
    }

  template <typename F>
    enable_ifn_string_t<F, NodeBase*> NodeBase::Define(
        const std::string& name,
        F f,
        const ColumnNames_t& columns)
    {
      // We don't actually use the output of the action so we don't store it.
      // However we need there to be a return value for the lambda.
      // Note that this action updates the node passed in.
      Act([] (RNode& rnode, const std::string& name, F f, const ColumnNames_t& columns) {
          return rnode = rnode.Define(name, f, columns); },
          columns,
          SysVarNewBranch(name), f, SysVarBranchVector(columns) );
      return this;
    }

  template <std::size_t N, typename F, typename Ret_t>
    std::enable_if_t<N==std::tuple_size<Ret_t>::value, NodeBase*> NodeBase::Define(
        const std::array<std::string, N>& names,
        F f,
        const ColumnNames_t& columns)
    {
      // Start by defining a variable that contains all of the outputs. We'll
      // form this by separating them with underscores
      std::string fullName = "_" + boost::algorithm::join(names, "_") + "_";
      Define(fullName, f, columns);
      unwindDefine<N-1>(names, fullName, static_cast<Ret_t*>(nullptr) );
      return this;
    }
  template <std::size_t I, std::size_t N, typename... Elements>
    std::enable_if_t<I != 0, void> NodeBase::unwindDefine(
        const std::array<std::string, N>& names,
        const std::string& fullName,
        const std::tuple<Elements...>* dummy)
    {
      Define(
          names.at(I),
          [] (const std::tuple<Elements...>& tup) { return std::get<I>(tup); },
          {fullName});
      unwindDefine<I-1>(names, fullName, dummy);
    }

  template <std::size_t I, std::size_t N, typename... Elements>
    std::enable_if_t<I == 0, void> NodeBase::unwindDefine(
        const std::array<std::string, N>& names,
        const std::string& fullName,
        const std::tuple<Elements...>*)
    {
      Define(
          names.at(I),
          [] (const std::tuple<Elements...>& tup) { return std::get<I>(tup); },
          {fullName});
    }


  template <typename F>
    enable_ifn_string_t<F, std::map<std::string, RNode>> NodeBase::makeChildRNodes(
        F f,
        const ColumnNames_t& columns,
        const std::string& cutflowName)
    {
      return Act(
          [] (RNode& rnode, F f, const ColumnNames_t& columns, const std::string& cutflowName) -> RNode {
          return rnode.Filter(f, columns, cutflowName); },
          columns,
          f,
          SysVarBranchVector(columns),
          cutflowName);
    }

  template <typename F>
    enable_ifn_string_t<F, std::string> NodeBase::setWeight(
        F f,
        const ColumnNames_t& columns, 
        NodeBase* parent,
        WeightStrategy strategy)
    {
      if (!(strategy & WeightStrategy::MCOnly) || isMC() )
        // if this is an MC-only weight and we're not in the MC mode just do
        // whatever the parent is doing. If there's no parent then just use the
        // empty string (no weight).
        return parent ? parent->getWeight() : "";
      if (!!(strategy & WeightStrategy::Multiplicative) &&
          parent && parent->getWeight() != "") {
        // If we've requested a multiplicative weight and there is a parent
        // weight to multiply adapt f to multiply by the parent weight.
        ColumnNames_t newColumns = columns;
        newColumns.push_back(parent->getWeight() );
        return setWeight(
            [f] (auto&&... args, const double& parentWeight) {
              return parentWeight * f(std::forward<decltype(args)>(args)...);
            },
            newColumns,
            false);
      }

      // If we reach here then we no longer need to worry about the strategy -
      // we've already taken care of all of that
      // Just define the new weight and return it.
      std::string weight = nameWeight();
      Define(weight, f, columns);
      return weight;
    }

  template <typename T>
    SysResultPtr<T> NodeBase::Fill(
        const T& model,
        const ColumnNames_t& columns,
        const std::string& weight,
        WeightStrategy strategy)
    {
      // Here I assume that I can add a weight by just appending it to list of
      // input columns...
      ColumnNames_t newColumns = columns;
      if (!weight.empty() && (!(strategy & WeightStrategy::MCOnly) || isMC() ) ) {
        if (!!(strategy & WeightStrategy::Multiplicative) && !getWeight().empty() ) {
          // We need to create a new weight branch from the product of this and
          // the existing weight
          std::string newWeight = uniqueBranchName("HistWeight");
          Define(newWeight, weight + " * " + getWeight() );
          newColumns.push_back(newWeight);
        }
        else
          newColumns.push_back(weight);
      }
      // Create the result pointer
      SysResultPtr<T> result = ActResult(
          [] (RNode& rnode, T&& t, const ColumnNames_t& col) { return rnode.Fill(T(t), col); },
          newColumns,
          T(model),
          SysVarBranchVector(newColumns) );
      m_objects.push_back(result);
      return result; 
    }

  template <typename W>
    NodeBase::NodeBase(
        const RNode& rnode,
        std::unique_ptr<IBranchNamer>&& namer,
        bool isMC,
        const std::string& name,
        const std::string& cutflowName,
        W w,
        const ColumnNames_t& columns,
        WeightStrategy strategy) :
      m_rnodes({{namer->nominalName(), rnode}}),
      m_namer(std::move(namer) ),
      m_namerInit(*m_namer, m_rnodes),
      m_isMC(isMC),
      m_name(name),
      m_cutflowName(cutflowName),
      m_weight(setWeight(w, columns, nullptr, strategy) )
    {
    }

  template <typename W>
    NodeBase::NodeBase(
        NodeBase& parent,
        std::map<std::string, RNode>&& rnodes,
        const std::string& name,
        const std::string& cutflowName,
        W w,
        const ColumnNames_t& columns,
        WeightStrategy strategy) :
      m_rnodes(std::move(rnodes) ),
      m_namer(parent.namer().copy() ),
      m_isMC(parent.isMC() ),
      m_name(name),
      m_cutflowName(cutflowName),
      m_weight(setWeight(w, columns, &parent, strategy) )
    {
    }
}

#endif //> !RDFAnalysis_NodeBase_ICC
