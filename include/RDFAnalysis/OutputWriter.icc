#ifndef RDFAnalysis_OutputWriter_ICC
#define RDFAnalysis_OutputWriter_ICC

namespace RDFAnalysis {
  template <typename N>
    OutputWriter<N>::OutputWriter(
        const std::shared_ptr<TDirectory>& directory) :
      m_directory(directory)
    {}

  template <typename N>
    OutputWriter<N>::OutputWriter(
        const std::string& fileName,
        bool overwrite) :
      m_directory(std::make_shared<TFile>(
            fileName.c_str(), overwrite ? "RECREATE" : "CREATE") )
    {
      if (m_directory->IsZombie() )
        throw std::runtime_error("Failed to open " + fileName);
    }

  template <typename N>
    void OutputWriter<N>::write(
        N& node,
        TDirectory* directory,
        std::size_t depth)
    {
      directory->cd();
      // Apply all of the writers - writers are not applied to anonymous nodes!
      if (!node.isAnonymous() )
        for (std::shared_ptr<INodeWriter<N>>& writer : m_writers)
          writer->write(node, directory, depth);

      // Now go through all of this node's children
      for (std::shared_ptr<N>& child : node.children() ) {
        // If the child is anonymous then just pass down what we have now
        if (child->isAnonymous() )
          write(*child, directory, depth);
        else {
          // Otherwise create a new directory for this
          TDirectory* newDirectory = getMkdir(directory, child->name() );
          write(*child, newDirectory, depth + 1);
        }
      }
    }
} //> end namespace RDFAnalysis
#endif //> !RDFAnalysis_OutputWriter_ICC
