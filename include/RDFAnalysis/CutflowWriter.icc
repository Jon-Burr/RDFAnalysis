#ifndef RDFAnalysis_CutflowWriter_ICC
#define RDFAnalysis_CutflowWriter_ICC

#include <stack>

namespace RDFAnalysis {
  template <typename Detail>
    CutflowWriter<Detail>::CutflowWriter(const std::string& subDirName) :
      m_subDirName(subDirName)
    {}

  template <typename Detail>
    void CutflowWriter<Detail>::write(
        Node<Detail>& node,
        TDirectory* directory,
        std::size_t depth)
    {
      // For each systematic that affects this cutflow
      for (auto& p : node.detail().stats() ) {
        std::string syst = p.first;
        // Prepare the stack for the cutflow information
        // The first element of the pair is the cutflow name, the second is the
        // event count at that stage
        std::stack<std::pair<std::string, ULong64_t>> cutflow;
        // Step back through the chain
        Node<Detail>* current = &node;
        while (current) {
          if (!current->isAnonymous() )
            cutflow.emplace(
                current->cutflowName(),
                *current->detail().stats().get(syst) );
          current = current->parent();
        }
        // Now go back through, creating the histogram
        std::size_t nCuts = cutflow.size();
        TH1F cutflowHist("Cutflow", "Cutflow", nCuts, 0, nCuts);
        for (std::size_t ii = 1; ii <= nCuts; ++ii) {
          cutflowHist.SetBinContent(ii, cutflow.top().second);
          cutflowHist.SetBinError(ii, sqrt(cutflow.top().second) );
          cutflowHist.GetXaxis()->SetBinLabel(ii, cutflow.top().first.c_str() );
          cutflow.pop();
        }
        // Write the cutflow
        TDirectory* systDir = getMkdir(directory, syst);
        systDir->WriteTObject(&cutflowHist);
      }
      // Now do the same for the weighted cutflow
      for (auto& p : node.detail().weightedStats() ) {
        std::string syst = p.first;
        // Prepare the stack for the cutflow information
        // The first element of the pair is the cutflow name, the second is the
        // sum of weight, sum of weight squared pair
        std::stack<std::pair<std::string, std::pair<float, float>>> cutflow;
        // Step back through the chain
        Node<Detail>* current = &node;
        while (current) {
          if (!current->isAnonymous() ) {
            if (current->detail().weightedStats().size() == 0)
              // If there's no weighted stats default to the unweighted
              cutflow.emplace(
                  current->cutflowName(),
                  std::make_pair(
                    *current->detail().stats().get(syst),
                    *current->detail().stats().get(syst) ) );
            else 
              cutflow.emplace(
                  current->cutflowName(),
                  *current->detail().weightedStats().get(syst) );
          }
          current = current->parent();
        }
        // Now go back trhough, creating the histogram
        std::size_t nCuts = cutflow.size();
        TH1F cutflowHist("WeightedCutflow", "WeightedCutflow", nCuts, 0, nCuts);
        for (std::size_t ii = 1; ii <= nCuts; ++ii, cutflow.pop() ) {
          cutflowHist.SetBinContent(ii, cutflow.top().second.first);
          cutflowHist.SetBinError(ii, sqrt(cutflow.top().second.second) );
          cutflowHist.GetXaxis()->SetBinLabel(ii, cutflow.top().first.c_str() );
        }
        // Write the cutflow
        TDirectory* systDir = getMkdir(directory, syst);
        systDir->WriteTObject(&cutflowHist);
      }
    }

} //> end namespace RDFAnalysis

#endif //> !RDFAnalysis_CutflowWriter_ICC
