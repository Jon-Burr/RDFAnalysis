#ifndef RDFAnalysis_Scheduler_ICC
#define RDFAnalysis_Scheduler_ICC

#include <boost/algorithm/string/join.hpp>
#include <limits>
#include <fstream>

namespace RDFAnalysis {
  template <typename Detail>
    SchedulerBase::ScheduleNode& Scheduler<Detail>::schedule(
        const std::string& graphFile)
    {
      // Get the schedule from the base class
      ScheduleNode& rsn = SchedulerBase::schedule(root()->namer() );
      for (std::shared_ptr<auditor_t>& auditor : m_auditors)
        auditor->auditSchedule(rsn);
      if (!graphFile.empty() ) {
        std::ofstream of(graphFile);
        printSchedule(of, rsn);
      }
      // Sequence the variables
      for (const std::string& var : usedVariables() )
        m_variables.at(var)(root() );
      addNode(rsn, root() );
      return rsn;
    }

  template <typename Detail>
    void Scheduler<Detail>::registerVariableImpl(
        const std::string& name,
        std::function<void(node_t*)> action,
        const std::set<std::string>& variables,
        const std::set<std::string>& filters,
        float cost)
    {
      if (m_variables.count(name) == 1)
        throw std::runtime_error(
            "Multiple definitions for variable '" + name + "'!");
      m_variables[name] = action;
      std::set<Action> dependencies;
      for (const std::string& variable : variables)
        dependencies.insert({VARIABLE, variable});
      for (const std::string& filter : filters)
        dependencies.insert({FILTER, filter});
      addAction({VARIABLE, name, cost}, dependencies);
      m_namer.createBranch(name);
    }

  template <typename Detail> template <typename F>
    enable_ifn_string_t<F, void> Scheduler<Detail>::registerVariable(
        const std::string& name, 
        F f,
        const ColumnNames_t& columns,
        const std::set<std::string>& filters,
        float cost)
    {
      registerVariableImpl(
          name, 
          [name, f, columns] (node_t* node) {node->Define(name, f, columns);},
          {columns.begin(), columns.end()},
          filters,
          cost);
    }

  template <typename Detail>
    void Scheduler<Detail>::registerVariable(
        const std::string& name,
        const std::string& expression,
        const std::set<std::string>& filters,
        float cost)
    {
      auto expanded = m_namer.expandExpression(expression);
      registerVariable(name, expanded.first, expanded.second, filters, cost);
    }

  template <typename Detail>
    void Scheduler<Detail>::registerVariable(
        const std::string& name,
        const std::string& expression,
        const ColumnNames_t& columns,
        const std::set<std::string>& filters,
        float cost)
    {
      registerVariableImpl(
          name,
          [name, expression, columns] (node_t* node) {node->Define(name, expression, columns);},
          {columns.begin(), columns.end()},
          filters,
          cost);
    }

  template <typename Detail> template <std::size_t N>
    void Scheduler<Detail>::registerVariablesImpl(
        const std::array<std::string, N>& names,
        std::function<void(node_t*)> action,
        const std::set<std::string>& variables,
        const std::set<std::string>& filters,
        float cost)
    {
      std::string fullName = boost::algorithm::join(names, ", ");
      registerVariableImpl(fullName, action, variables, filters, cost);
      actionDefinesMultipleVariables(fullName, {names.begin(), names.end()});
      for (const std::string& name : names)
        m_namer.createBranch(name);
    }

  template <typename Detail> template <std::size_t N, typename F>
    enable_ifn_string_t<F, void> Scheduler<Detail>::registerVariables(
        const std::array<std::string, N>& names,
        F f,
        const ColumnNames_t& columns,
        const std::set<std::string>& filters,
        float cost)
    {
      registerVariablesImpl(
          names,
          [names, f, columns] (node_t* node) {node->Define(names, f, columns);},
          {columns.begin(), columns.end()},
          filters,
          cost);
    }

  template <typename Detail>
    void Scheduler<Detail>::registerFilterImpl(
        const std::string& name,
        std::function<node_t*(node_t*)> action,
        const std::set<std::string>& variables,
        const std::set<std::string>& filters,
        float cost)
    {
      if (m_filters.count(name) == 1)
        throw std::runtime_error(
            "Multiple definitions for filter '" + name + "'!");
      m_filters[name] = action;
      std::set<Action> dependencies;
      for (const std::string& variable : variables)
        dependencies.insert({VARIABLE, variable});
      for (const std::string& filter : filters)
        dependencies.insert({FILTER, filter});
      addAction({FILTER, name, cost}, dependencies);
    }

  template <typename Detail> template <typename F>
    std::enable_if_t<std::is_convertible<typename ROOT::TTraits::CallableTraits<F>::ret_type, std::tuple<bool, float>>::value, void> Scheduler<Detail>::registerFilter(
        F f,
        const ColumnNames_t& columns,
        const std::string& name,
        const std::string& cutflowName,
        WeightStrategy strategy,
        const std::set<std::string>& filters,
        float cost)
    {
      registerFilterImpl(
          name,
          [f, columns, name, cutflowName, strategy] (node_t* node)
          { return node->Filter(f, columns, name, cutflowName, strategy); },
          {columns.begin(), columns.end()},
          filters,
          cost);
    }

  template <typename Detail> template <typename F>
    std::enable_if_t<std::is_convertible<typename ROOT::TTraits::CallableTraits<F>::ret_type, bool>::value, void> Scheduler<Detail>::registerFilter(
        F f,
        const ColumnNames_t& columns,
        const std::string& name,
        const std::string& cutflowName,
        const std::string& weight,
        WeightStrategy strategy,
        const std::set<std::string>& filters,
        float cost)
    {
      std::set<std::string> variables(columns.begin(), columns.end() );
      auto expanded = m_namer.expandExpression(weight);
      variables.insert(expanded.second.begin(), expanded.second.end() );
      registerFilterImpl(
          name,
          [f, columns, name, cutflowName, weight, strategy] (node_t* node)
          { return node->Filter(f, columns, name, cutflowName, weight, strategy); },
          variables,
          filters,
          cost);
    }

  template <typename Detail>
    void Scheduler<Detail>::registerFilter(
        const std::string& expression,
        const std::string& name,
        const std::string& cutflowName,
        const std::string& weight,
        WeightStrategy strategy,
        const std::set<std::string>& filters,
        float cost)
    {
      std::set<std::string> variables;
      auto exprExpanded = m_namer.expandExpression(expression);
      variables.insert(exprExpanded.second.begin(), exprExpanded.second.end() );
      auto weightExpanded = m_namer.expandExpression(weight);
      variables.insert(weightExpanded.second.begin(), weightExpanded.second.end() );
      registerFilterImpl(
          name,
          [expression, name, cutflowName, weight, strategy] (node_t* node)
          { return node->Filter(expression, name, cutflowName, weight, strategy); },
          variables,
          filters,
          cost);
    }

  template <typename Detail> template <typename F, typename W>
    std::enable_if_t<!std::is_convertible<F, std::string>::value && !std::is_convertible<W, std::string>::value, void> Scheduler<Detail>::registerFilter(
        F f,
        const ColumnNames_t& columns,
        const std::string& name,
        const std::string& cutflowName,
        W w,
        const ColumnNames_t& weightColumns,
        WeightStrategy strategy,
        const std::set<std::string>& filters,
        float cost)
    {
      std::set<std::string> variables(columns.begin(), columns.end() );
      variables.insert(weightColumns.begin(), weightColumns.end() );
      registerFilterImpl(
          name,
          [f, columns, name, cutflowName, w, weightColumns, strategy] (node_t* node)
          { return node->Filter(f, columns, name, cutflowName, w, weightColumns, strategy); },
          variables,
          filters,
          cost);
    }

  template <typename Detail> template <typename W>
    enable_ifn_string_t<W, void> Scheduler<Detail>::registerFilter(
        const std::string& expression,
        const std::string& name,
        const std::string& cutflowName,
        W w,
        const ColumnNames_t& weightColumns,
        WeightStrategy strategy,
        const std::set<std::string>& filters,
        float cost)
    {
      std::set<std::string> variables(weightColumns.begin(), weightColumns.end() );
      auto expanded = m_namer.expandExpression(expression);
      variables.insert(expanded.second.begin(), expanded.second.end() );
      registerFilterImpl(
          name,
          [expression, name, cutflowName, w, weightColumns, strategy] (node_t* node)
          { return node->Filter(expression, name, cutflowName, w, weightColumns, strategy); },
          variables,
          filters,
          cost);
    }

  template <typename Detail>
    void Scheduler<Detail>::registerFillImpl(
        const std::string& name,
        std::function<SysResultPtr<TObject>(node_t*)> action,
        const std::set<std::string>& variables,
        const std::set<std::string>& filters)
    {
      if (m_fills.count(name) == 1)
        throw std::runtime_error(
            "Multiple definitions for fill '" + name + "'!");
      m_fills[name] = action;
      std::set<Action> dependencies;
      for (const std::string& variable : variables)
        dependencies.insert({VARIABLE, variable});
      for (const std::string& filter : filters)
        dependencies.insert({FILTER, filter});
      addAction({FILL, name}, dependencies);
    }

  template <typename Detail> template <typename T>
    void Scheduler<Detail>::registerFill(
        const T& model,
        const ColumnNames_t& columns,
        const std::string& weight,
        WeightStrategy strategy,
        const std::set<std::string>& filters)
    {
      registerFillImpl(
          model.GetName(),
          [model, columns, weight, strategy] (node_t* node) -> SysResultPtr<TObject>
          { return node->Fill(model, columns, weight, strategy); },
          {columns.begin(), columns.end()},
         filters);
    }

  template <typename Detail>
    void Scheduler<Detail>::addNode(
        const ScheduleNode& source,
        node_t* target,
        const std::string& currentRegion)
    {
      for (std::shared_ptr<auditor_t>& auditor : m_auditors)
        auditor->preAuditNode(source, target, currentRegion);
      if (source.action.name != "ROOT") {
        // Don't copy anything across from ROOT
        switch(source.action.type) {
          case FILTER:
            target = m_filters.at(source.action.name)(target);
            break;
          case VARIABLE:
            m_variables.at(source.action.name)(target);
            break;
          case FILL:
            m_regions[currentRegion].objects.push_back(
                m_fills.at(source.action.name)(target) );
            break;
          default:
            throw std::runtime_error("Invalid action scheduled!!");
        }
      }
      for (std::shared_ptr<auditor_t>& auditor : m_auditors)
        auditor->postAuditNode(source, target, currentRegion);
      // Does this node define a region?
      if (!source.region.empty() )
        m_regions[source.region].node = target;
      for (const ScheduleNode& child : source.children)
        addNode(child, target, 
                source.region.empty() ? currentRegion : source.region);
    }
} //> end namespace RDFAnalysis

#endif //> !RDFAnalysis_Scheduler_ICC
